AWSTemplateFormatVersion: '2010-09-09'
Description: Test Hyperdrive installation
Resources:
  CognitoClientSettingsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - "sts:AssumeRole"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
      - PolicyName: cog
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "cognito-idp:UpdateUserPoolClient"
            Resource:
            - "*"
  CognitoClientSettingsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: {{index . "bucket"}}
        S3Key: lambda/cogclientset.zip
        S3ObjectVersion: {{index . "cogclientset"}}
      Description: Cloudformation Custom Resource for configuring a Cognito User Pool Client.
      Handler: cogclientset
      MemorySize: 128
      Role: !GetAtt CognitoClientSettingsRole.Arn
      Runtime: go1.x
      Timeout: 300
  CognitoClientSettingsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
        - "/aws/lambda/${LambdaName}"
        - LambdaName: !Ref CognitoClientSettingsFunction
      RetentionInDays: 90
  CognitoClientSettingsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoClientSettingsFunction.Arn
      Principal: cloudformation.amazonaws.com
  DnsCertificateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - "sts:AssumeRole"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
      - PolicyName: acm
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "acm:*"
            Resource:
            - "*"
  DnsCertificateFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: {{index . "bucket"}}
        S3Key: lambda/dnscert.zip
        S3ObjectVersion: {{index . "dnscert"}}
      Description: Cloudformation Custom Resource for SSL Certificates validated via DNS.
      Handler: dnscert
      MemorySize: 128
      Role: !GetAtt DnsCertificateRole.Arn
      Runtime: go1.x
      Timeout: 300
  DnsCertificateLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
        - "/aws/lambda/${LambdaName}"
        - LambdaName: !Ref DnsCertificateFunction
      RetentionInDays: 90
  DnsCertificatePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DnsCertificateFunction.Arn
      Principal: cloudformation.amazonaws.com
  LogGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - "sts:AssumeRole"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
      - PolicyName: cloudwatchlogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "logs:*"
            Resource:
            - "*"
  LogGroupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: {{index . "bucket"}}
        S3Key: lambda/loggrp.zip
        S3ObjectVersion: {{index . "loggrp"}}
      Description: Cloudformation Custom Resource for log groups with tags and other regions
      Handler: loggrp
      MemorySize: 128
      Role: !GetAtt LogGroupRole.Arn
      Runtime: go1.x
      Timeout: 300
  LogGroupLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
        - "/aws/lambda/${LambdaName}"
        - LambdaName: !Ref LogGroupFunction
      RetentionInDays: 90
  LogGroupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LogGroupFunction.Arn
      Principal: cloudformation.amazonaws.com

Outputs:
  DnsCertificate:
    Value: !GetAtt DnsCertificateFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DnsCertificate"
  LogGroup:
    Value: !GetAtt LogGroupFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LogGroup"
  CognitoClientSettings:
    Value: !GetAtt CognitoClientSettingsFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CognitoClientSettings"