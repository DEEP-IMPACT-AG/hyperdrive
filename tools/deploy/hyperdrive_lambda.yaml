AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Hyperdrive Core Resources
Parameters:
  Version:
    Type: String
  HyperdriveKmsKeyId:
    Type: String
Resources:
  # 1. Cloudformation custom resources
  CogCondRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: ssm
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Sid: ssm
                Action:
                  - "ssm:DescribeParameters"
                  - "ssm:GetParametersByPath"
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                Resource:
                  - "arn:aws:ssm:*:*:parameter/hyperdrive/cogcong/*"
  CogCondFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: live
      CodeUri: ../../dist/linux_amd64/cogcond
      Runtime: go1.x
      Handler: cogcond
      Role: !GetAtt CogCondRole.Arn
  CogCondLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
          - "/aws/lambda/${LambdaName}"
          - LambdaName: !Ref CogCondFunction
      RetentionInDays: 90
  CogCondPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CogCondFunction.Arn
      Principal: cognito-idp.amazonaws.com
  CfApiKeyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: apikey
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "apigateway:*"
                Resource:
                  - !Sub "arn:aws:apigateway:${AWS::Region}::/apikeys"
                  - !Sub "arn:aws:apigateway:${AWS::Region}::/apikeys/*"
              - Effect: Allow
                Action:
                  - "cloudformation:DescribeStacks"
                Resource:
                  - "*"
  CfApiKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: live
      CodeUri: ../../dist/linux_amd64/cfapikey
      Description: Cloudformation Custom Resource for apg api keys for Cloudfront.
      Handler: cfapikey
      MemorySize: 128
      Role: !GetAtt CfApiKeyRole.Arn
      Runtime: go1.x
      Timeout: 300
  CfApiKeyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
          - "/aws/lambda/${LambdaName}"
          - LambdaName: !Ref CfApiKeyFunction
      RetentionInDays: 90
  CfApiKeyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CfApiKeyFunction.Arn
      Principal: cloudformation.amazonaws.com
  CognitoClientSettingsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: cog
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "cognito-idp:UpdateUserPoolClient"
                Resource:
                  - "*"
  CognitoClientSettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: live
      CodeUri: ../../dist/linux_amd64/cogclientset
      Description: Cloudformation Custom Resource for configuring a Cognito User Pool Client.
      Handler: cogclientset
      MemorySize: 128
      Role: !GetAtt CognitoClientSettingsRole.Arn
      Runtime: go1.x
      Timeout: 300
  CognitoClientSettingsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
          - "/aws/lambda/${LambdaName}"
          - LambdaName: !Ref CognitoClientSettingsFunction
      RetentionInDays: 90
  CognitoClientSettingsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoClientSettingsFunction.Arn
      Principal: cloudformation.amazonaws.com
  CognitoDomainRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: cog
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "cognito-idp:CreateUserPoolDomain"
                  - "cognito-idp:DeleteUserPoolDomain"
                  - "cloudfront:UpdateDistribution"
                Resource:
                  - "*"
  CognitoDomainFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: live
      CodeUri: ../../dist/linux_amd64/cogdomain
      Description: Cloudformation Custom Resource for Cognito User Pool Domain
      Handler: cogdomain
      MemorySize: 128
      Role: !GetAtt CognitoDomainRole.Arn
      Runtime: go1.x
      Timeout: 300
  CognitoDomainLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
          - "/aws/lambda/${LambdaName}"
          - LambdaName: !Ref CognitoDomainFunction
      RetentionInDays: 90
  CognitoDomainPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoDomainFunction.Arn
      Principal: cloudformation.amazonaws.com
  CognitoIdentityProviderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: idp
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "cognito-idp:CreateIdentityProvider"
                  - "cognito-idp:DeleteIdentityProvider"
                  - "cognito-idp:UpdateIdentityProvider"
                Resource:
                  - "*"
        - PolicyName: ssm
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/hyperdrive/cogidp/*"
        - PolicyName: kms
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${HyperdriveKmsKeyId}"
  CognitoIdentityProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: live
      CodeUri: ../../dist/linux_amd64/cogidp
      Description: Cloudformation Custom Resource for cognito user pool idendity provider
      Handler: cogidp
      MemorySize: 128
      Role: !GetAtt CognitoIdentityProviderRole.Arn
      Runtime: go1.x
      Timeout: 300
  CognitoIdentityProviderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
          - "/aws/lambda/${LambdaName}"
          - LambdaName: !Ref CognitoIdentityProviderFunction
      RetentionInDays: 90
  CognitoIdentityProviderPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoIdentityProviderFunction.Arn
      Principal: cloudformation.amazonaws.com
  DnsCertificateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: acm
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "acm:*"
                Resource:
                  - "*"
  DnsCertificateFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: live
      CodeUri: ../../dist/linux_amd64/dnscert
      Description: Cloudformation Custom Resource for SSL Certificates validated via DNS.
      Handler: dnscert
      MemorySize: 128
      Role: !GetAtt DnsCertificateRole.Arn
      Runtime: go1.x
      Timeout: 300
  DnsCertificateLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
          - "/aws/lambda/${LambdaName}"
          - LambdaName: !Ref DnsCertificateFunction
      RetentionInDays: 90
  DnsCertificatePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DnsCertificateFunction.Arn
      Principal: cloudformation.amazonaws.com
  EcrCleanupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: ecr
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:*"
                  - "cloudformation:DescribeStacks"
                Resource:
                  - "*"
  EcrCleanupFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: live
      CodeUri: ../../dist/linux_amd64/ecrcleanup
      Description: Cloudformation Custom Resource for ECR Cleaning
      Handler: ecrcleanup
      MemorySize: 128
      Role: !GetAtt EcrCleanupRole.Arn
      Runtime: go1.x
      Timeout: 300
  EcrCleanupLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
          - "/aws/lambda/${LambdaName}"
          - LambdaName: !Ref EcrCleanupFunction
      RetentionInDays: 90
  EcrCleanupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt EcrCleanupFunction.Arn
      Principal: cloudformation.amazonaws.com
  LogGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: cloudwatchlogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource:
                  - "*"
  LogGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: live
      CodeUri: ../../dist/linux_amd64/loggrp
      Description: Cloudformation Custom Resource for log groups with tags and other regions
      Handler: loggrp
      MemorySize: 128
      Role: !GetAtt LogGroupRole.Arn
      Runtime: go1.x
      Timeout: 300
  LogGroupLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
          - "/aws/lambda/${LambdaName}"
          - LambdaName: !Ref LogGroupFunction
      RetentionInDays: 90
  LogGroupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LogGroupFunction.Arn
      Principal: cloudformation.amazonaws.com
  S3CleanupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                  - "cloudformation:DescribeStacks"
                Resource:
                  - "*"
  S3CleanupFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: live
      CodeUri: ../../dist/linux_amd64/s3cleanup
      Description: Cloudformation Custom Resource for S3 Bucket Cleaning
      Handler: s3cleanup
      MemorySize: 128
      Role: !GetAtt S3CleanupRole.Arn
      Runtime: go1.x
      Timeout: 300
  S3CleanupLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
          - "/aws/lambda/${LambdaName}"
          - LambdaName: !Ref S3CleanupFunction
      RetentionInDays: 90
  S3CleanupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt S3CleanupFunction.Arn
      Principal: cloudformation.amazonaws.com
  RotateCfApiKeyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: cloudformation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:DeleteChangeSet"
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:UpdateStack"
                  - "events:DescribeRule"
                Resource:
                  - "*"
  RotateCfApiKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: live
      CodeUri: ../../dist/linux_amd64/rotatecfapikey
      Description: Cloudformation Custom Resource for apg api keys for Cloudfront.
      Handler: rotatecfapikey
      MemorySize: 128
      Role: !GetAtt RotateCfApiKeyRole.Arn
      Runtime: go1.x
      Timeout: 300
  RotateCfApiKeyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
          - "/aws/lambda/${LambdaName}"
          - LambdaName: !Ref RotateCfApiKeyFunction
      RetentionInDays: 90
  RotateCfApiKeyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt RotateCfApiKeyFunction.Arn
      Principal: events.amazonaws.com
Outputs:
  CogCond:
    Value: !GetAtt CogCondFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CogCond"
  CogCondAlias:
    Value: !Ref CogCondFunction.Alias
    Export:
      Name: !Sub "${AWS::StackName}-CogCondAlias"
  CogCondVersion:
    Value: !Ref CogCondFunction.Version
    Export:
      Name: !Sub "${AWS::StackName}-CogCondVersion"
  CfApiKey:
    Value: !GetAtt CfApiKeyFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CfApiKey"
  CfApiKeyAlias:
    Value: !Ref CfApiKeyFunction.Alias
    Export:
      Name: !Sub "${AWS::StackName}-CfApiKeyAlias"
  CfApiKeyVersion:
    Value: !Ref CfApiKeyFunction.Version
    Export:
      Name: !Sub "${AWS::StackName}-CfApiKeyVersion"
  CognitoClientSettings:
    Value: !GetAtt CognitoClientSettingsFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CognitoClientSettings"
  CognitoClientSettingsAlias:
    Value: !Ref CognitoClientSettingsFunction.Alias
    Export:
      Name: !Sub "${AWS::StackName}-CognitoClientSettingsAlias"
  CognitoClientSettingsVersion:
    Value: !Ref CognitoClientSettingsFunction.Version
    Export:
      Name: !Sub "${AWS::StackName}-CognitoClientSettingsVersion"
  CognitoDomain:
    Value: !GetAtt CognitoDomainFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CognitoDomain"
  CognitoDomainAlias:
    Value: !Ref CognitoDomainFunction.Alias
    Export:
      Name: !Sub "${AWS::StackName}-CognitoDomainAlias"
  CognitoDomainVersion:
    Value: !Ref CognitoDomainFunction.Version
    Export:
      Name: !Sub "${AWS::StackName}-CognitoDomainVersion"
  CognitoIdentityProvider:
    Value: !GetAtt CognitoIdentityProviderFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CognitoIdentityProvider"
  CognitoIdentityProviderAlias:
    Value: !Ref CognitoIdentityProviderFunction.Alias
    Export:
      Name: !Sub "${AWS::StackName}-CognitoIdentityProviderAlias"
  CognitoIdentityProviderVersion:
    Value: !Ref CognitoIdentityProviderFunction.Version
    Export:
      Name: !Sub "${AWS::StackName}-CognitoIdentityProviderVersion"
  DnsCertificate:
    Value: !GetAtt DnsCertificateFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DnsCertificate"
  DnsCertificateAlias:
    Value: !Ref DnsCertificateFunction.Alias
    Export:
      Name: !Sub "${AWS::StackName}-DnsCertificateAlias"
  DnsCertificateVersion:
    Value: !Ref DnsCertificateFunction.Version
    Export:
      Name: !Sub "${AWS::StackName}-DnsCertificateVersion"
  EcrCleanup:
    Value: !GetAtt EcrCleanupFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EcrCleanup"
  EcrCleanupAlias:
    Value: !Ref EcrCleanupFunction.Alias
    Export:
      Name: !Sub "${AWS::StackName}-EcrCleanupAlias"
  EcrCleanupVersion:
    Value: !Ref EcrCleanupFunction.Version
    Export:
      Name: !Sub "${AWS::StackName}-EcrCleanupVersion"
  LogGroup:
    Value: !GetAtt LogGroupFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LogGroup"
  LogGroupAlias:
    Value: !Ref LogGroupFunction.Alias
    Export:
      Name: !Sub "${AWS::StackName}-LogGroupAlias"
  LogGroupVersion:
    Value: !Ref LogGroupFunction.Version
    Export:
      Name: !Sub "${AWS::StackName}-LogGroupVersion"
  S3Cleanup:
    Value: !GetAtt S3CleanupFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-S3Cleanup"
  S3CleanupAlias:
    Value: !Ref S3CleanupFunction.Alias
    Export:
      Name: !Sub "${AWS::StackName}-S3CleanupAlias"
  S3CleanupVersion:
    Value: !Ref S3CleanupFunction.Version
    Export:
      Name: !Sub "${AWS::StackName}-S3CleanupVersion"
  RotateCfApiKey:
    Value: !GetAtt RotateCfApiKeyFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RotateCfApiKey"
  RotateCfApiKeyAlias:
    Value: !Ref RotateCfApiKeyFunction.Alias
    Export:
      Name: !Sub "${AWS::StackName}-RotateCfApiKeyAlias"
  RotateCfApiKeyVersion:
    Value: !Ref RotateCfApiKeyFunction.Version
    Export:
      Name: !Sub "${AWS::StackName}-RotateCfApiKeyVersion"
  Version:
    Value: !Ref Version
    Export:
      Name: !Sub "${AWS::StackName}-Version"