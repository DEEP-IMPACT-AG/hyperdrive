AWSTemplateFormatVersion: '2010-09-09'
Description: The Core resources for the Hyperdrive.
Parameters:
  BaseDomainName:
    Type: String
Conditions:
  IsUsEast1:
    Fn::Equals: [!Sub "${AWS::Region}", "us-east-1"]
Mappings:
  IamNaming:
    Role:
      CloudformationECSLambdaStackRole: HyperdriveCloudformationECSLambdaStack
      CloudformationLambdaStackRole: HyperdriveCloudformationLambdaStack
      CloudformationECSStackRole: HyperdriveCloudformationECSStack
    Policy:
      CloudformationECSPolicy: HyperdriveCloudformationECS
      CloudformationLambdaPolicy: HyperdriveCloudformationLambda
      HyperdriveS3BucketPolicy: HyperdriveS3Bucket
      CloudformationBuilderPolicy: HyperdriveCloudformationBuilder
Resources:
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: "${AWS::Region}.hyperdrive.artifacts.${BaseDomainName}-test"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  CloudFrontOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Hyperdrive Identity for Artifacts Bucket"
  ArtifactsBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref ArtifactsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Id: "cf-identity"
        Statement:
          - Sid: "cf-identity"
            Effect: "Allow"
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginIdentity.S3CanonicalUserId
            Action:
              - "s3:GetObject"
              - "s3:ListBucket"
            Resource:
              - !GetAtt ArtifactsBucket.Arn
              - Fn::Sub:
                  - "${Arn}/*"
                  - Arn: !GetAtt ArtifactsBucket.Arn
  CloudfrontLogBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: "${AWS::Region}.hyperdrive.cloudfront.${BaseDomainName}-test"
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 90
            Status: Enabled
  # 2. Cloudformation Policies/Roles
  CloudformationECSStackRole:
    Type: AWS::IAM::Role
    Condition: IsUsEast1
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      RoleName:
        Fn::FindInMap: [IamNaming, Role, CloudformationECSStackRole]
      ManagedPolicyArns:
        - !Ref CloudformationECSPolicy
  CloudformationLambdaStackRole:
    Type: AWS::IAM::Role
    Condition: IsUsEast1
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      RoleName:
        Fn::FindInMap: [IamNaming, Role, CloudformationLambdaStackRole]
      ManagedPolicyArns:
        - !Ref CloudformationLambdaPolicy
  CloudformationECSLambdaStackRole:
    Type: AWS::IAM::Role
    Condition: IsUsEast1
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      RoleName:
        Fn::FindInMap: [IamNaming, Role, CloudformationECSLambdaStackRole]
      ManagedPolicyArns:
        - !Ref CloudformationECSPolicy
        - !Ref CloudformationLambdaPolicy
  CloudformationECSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: IsUsEast1
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:getObject"
              - "elasticloadbalancing:*"
              - "ecs:*"
              - "ecr:*"
              - "logs:*"
              - "sns:Publish"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "iam:GetRole"
              - "iam:CreateRole"
              - "iam:DeleteRole"
              - "iam:PutRolePolicy"
              - "iam:AttachRolePolicy"
              - "iam:DeleteRolePolicy"
              - "iam:DetachRolePolicy"
              - "iam:PassRole"
            Resource:
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/*"
          - Effect: Allow
            Action:
              - "ec2:DescribeVpcs"
              - "ec2:DescribeSubnets"
              - "ec2:DescribeSecurityGroups"
              - "ec2:DescribeNetworkInterfaces"
            Resource:
              - "*"
      ManagedPolicyName:
        Fn::FindInMap: [IamNaming, Policy, CloudformationECSPolicy]
  CloudformationLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: IsUsEast1
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "lambda:*"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "s3:getObject"
              - "apigateway:*"
              - "logs:*"
              - "sns:Publish"
              - "cloudfront:*"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "iam:GetRole"
              - "iam:CreateRole"
              - "iam:DeleteRole"
              - "iam:PutRolePolicy"
              - "iam:AttachRolePolicy"
              - "iam:DeleteRolePolicy"
              - "iam:DetachRolePolicy"
              - "iam:PassRole"
            Resource:
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/*"
          - Effect: Allow
            Action:
              - "cloudformation:CreateChangeSet"
            Resource:
              - "arn:aws:cloudformation:eu-west-1:aws:transform/Serverless-2016-10-31"
          - Effect: Allow
            Action:
              - "ec2:DescribeVpcs"
              - "ec2:DescribeSubnets"
              - "ec2:DescribeSecurityGroups"
              - "ec2:DescribeNetworkInterfaces"
            Resource:
              - "*"
      ManagedPolicyName:
        Fn::FindInMap: [IamNaming, Policy, CloudformationLambdaPolicy]
  HyperdriveS3BucketPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: IsUsEast1
    Properties:
      ManagedPolicyName:
        Fn::FindInMap: [IamNaming, Policy, HyperdriveS3BucketPolicy]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: s3
            Action:
              - "s3:DeleteObject"
              - "s3:DeleteObjectVersion"
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:PutObject"
              - "s3:ListBucket"
              - "s3:ListBucketVersions"
              - "s3:GetBucketVersioning"
            Resource:
              - Fn::ImportValue: !Sub "${HyperdriveCore}-ArtefactsBucketArn"
              - Fn::Sub:
                  - "${Bucket}/*"
                  - Bucket:
                      Fn::ImportValue: !Sub "${HyperdriveCore}-ArtefactsBucketArn"
  CloudformationBuilderPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: IsUsEast1
    Properties:
      ManagedPolicyName:
        Fn::FindInMap: [IamNaming, Policy, CloudformationBuilderPolicy]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "iam:PassRole"
              - "iam:GetRole"
            Resource:
              - !GetAtt CloudformationECSStackRole.Arn
              - !GetAtt CloudformationLambdaStackRole.Arn
              - !GetAtt CloudformationECSLambdaStackRole.Arn
          - Effect: Allow
            Action:
              - "ecr:GetAuthorizationToken"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:GetRepositoryPolicy"
              - "ecr:DescribeRepositories"
              - "ecr:ListImages"
              - "ecr:DescribeImages"
              - "ecr:BatchGetImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
              - "ecr:PutImage"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "cloudformation:CreateChangeSet"
              - "cloudformation:CreateStack"
              - "cloudformation:DescribeChangeSet"
              - "cloudformation:DescribeStackEvents"
              - "cloudformation:DescribeStackInstance"
              - "cloudformation:DescribeStackResource"
              - "cloudformation:DescribeStackResources"
              - "cloudformation:DescribeStacks"
              - "cloudformation:ExecuteChangeSet"
              - "cloudformation:UpdateStack"
              - "cloudformation:GetTemplateSummary"
              - "cloudformation:ValidateTemplate"
            Resource:
              - "*"
Outputs:
  ArtifactsBucketName:
    Value: !Ref ArtifactsBucket
    Export:
      Name: !Sub "${AWS::StackName}-ArtifactsBucketName"
  ArtifactsBucketArn:
    Value: !GetAtt ArtifactsBucket.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ArtifactsBucketArn"
  ArtifactsBucketDomain:
    Value: !GetAtt ArtifactsBucket.DomainName
    Export:
      Name: !Sub "${AWS::StackName}-ArtifactsBucketDomain"
  CloudFrontOriginIdentity:
    Value: !Ref CloudFrontOriginIdentity
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontOriginIdentity"
  CloudfrontLogBucketName:
    Value: !Ref ArtifactsBucket
    Export:
      Name: !Sub "${AWS::StackName}-CloudfrontLogBucketName"
  CloudfrontLogBucketArn:
    Value: !GetAtt ArtifactsBucket.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CloudfrontLogBucketArn"
  CloudfrontLogBucketDomain:
    Value: !GetAtt ArtifactsBucket.DomainName
    Export:
      Name: !Sub "${AWS::StackName}-CloudfrontLogBucketDomain"
  CloudformationECSStackRole:
    Value:
      Fn::Sub:
        - "arn:aws:iam::${AWS::AccountId}:role/${Name}"
        - Name:
            Fn::FindInMap: [IamNaming, Role, CloudformationECSStackRole]
    Export:
      Name: !Sub "${AWS::StackName}-CloudformationECSStackRole"
  CloudformationLambdaStackRole:
    Value:
      Fn::Sub:
        - "arn:aws:iam::${AWS::AccountId}:role/${Name}"
        - Name:
            Fn::FindInMap: [IamNaming, Role, CloudformationLambdaStackRole]
    Export:
      Name: !Sub "${AWS::StackName}-CloudformationLambdaStackRole"
  CloudformationECSLambdaStackRole:
    Value:
      Fn::Sub:
        - "arn:aws:iam::${AWS::AccountId}:role/${Name}"
        - Name:
            Fn::FindInMap: [IamNaming, Role, CloudformationECSLambdaStackRole]
    Export:
      Name: !Sub "${AWS::StackName}-CloudformationECSLambdaStackRole"
  CloudformationECSPolicy:
    Value:
      Fn::Sub:
        - "arn:aws:iam::${AWS::AccountId}:policy/${Name}"
        - Name:
            Fn::FindInMap: [IamNaming, Policy, CloudformationECSPolicy]
    Export:
      Name: !Sub "${AWS::StackName}-CloudformationECSPolicy"
  CloudformationLambdaPolicy:
    Value:
      Fn::Sub:
        - "arn:aws:iam::${AWS::AccountId}:policy/${Name}"
        - Name:
            Fn::FindInMap: [IamNaming, Policy, CloudformationLambdaPolicy]
    Export:
      Name: !Sub "${AWS::StackName}-CloudformationLambdaPolicy"
  HyperdriveS3BucketPolicy:
    Value:
      Fn::Sub:
        - "arn:aws:iam::${AWS::AccountId}:policy/${Name}"
        - Name:
            Fn::FindInMap: [IamNaming, Policy, HyperdriveS3BucketPolicy]
    Export:
      Name: !Sub "${AWS::StackName}-HyperdriveS3BucketPolicy"
  CloudformationBuilderPolicy:
    Value:
      Fn::Sub:
        - "arn:aws:iam::${AWS::AccountId}:policy/${Name}"
        - Name:
            Fn::FindInMap: [IamNaming, Policy, CloudformationBuilderPolicy]
    Export:
      Name: !Sub "${AWS::StackName}-CloudformationBuilderPolicy"
